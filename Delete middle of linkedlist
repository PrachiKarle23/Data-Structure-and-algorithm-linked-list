//1
class Solution {
public:
    int findMid(ListNode* head)
    {
        ListNode* slow=head;
        ListNode* fast=head;
        int cnt=1;
        while(fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            cnt++;
        }
        return cnt;
    }
    ListNode* deleteMiddle(ListNode* head) {
        int Mid=findMid(head);
        ListNode* temp=head;
        ListNode* prev=NULL;

        if(Mid==1){
            return NULL;
        }
        int cnt=1;
        while(temp!=NULL && cnt!=Mid)
        {
            prev=temp;
            temp=temp->next;
            cnt++;
        }
        // cout<<prev->val<<" "<<temp->val<<" "<<temp->next->val;
        prev->next=temp->next;
        return head;
    }
};



//2
class Solution {
public:
    int solve(ListNode* head)
    {
        ListNode* t=head;
        int len=0;
        while(t!=NULL)
        {
            len++;
            t=t->next;
        }
        return len;
    }
    ListNode* deleteMiddle(ListNode* head) {
        if(head->next==NULL){
            return NULL;
        }
        int n=solve(head),cnt=0;

        ListNode* t=head;
        ListNode* prev=NULL;
        while(t!=NULL && cnt!=(n/2))
        {
            prev=t;
            t=t->next;
            cnt++;
        }
        prev->next=t->next;
        t->next=NULL;
        return head;
    }
};


//3
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        if(head->next==NULL){
            return NULL;
        }
        
        vector<int>a;
        ListNode* t=head;
        while(t!=NULL)
        {
            a.push_back(t->val);
            t=t->next;
        }
        int n=a.size();
        ListNode* newnode=new ListNode(-1);
        ListNode* t1=newnode;
        for(int i=0;i<n;i++)
        {
            if(i!=n/2)
            {
               t1->next=new ListNode(a[i]);
               t1=t1->next;
            }
        }
        return newnode->next;
    }
};
