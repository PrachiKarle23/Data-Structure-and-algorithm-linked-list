/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool solve1(ListNode* head,TreeNode* root){
          if(head==NULL){
            return true;
          }
          if(head==NULL && root==NULL){
            return true;
          }
          if(head!=NULL && root==NULL){
            return false;
          }
          if(head->val!=root->val){
            return false;
          }
          bool left=solve1(head->next,root->left);
          bool right=solve1(head->next,root->right);

          return left || right;
    }
    void solve(ListNode* head,TreeNode* root,bool &ans){
        if(root==NULL){
            return;
        }
        if(root->val==head->val){
            if(ans==false){
               ans=(solve1(head->next,root->left) || solve1(head->next,root->right));
            }
        }
       solve(head,root->left,ans);
       solve(head,root->right,ans);
    }
    bool isSubPath(ListNode* head, TreeNode* root) {
         bool ans=false;
         solve(head,root,ans);
         return ans;
    }
};
