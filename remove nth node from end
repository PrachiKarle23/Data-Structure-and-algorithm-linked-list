class Solution {
public:
    int length(ListNode* head){
        ListNode* temp=head;
        int cnt=0;
        while(temp!=NULL)
        {
            temp=temp->next;
            cnt++;
        }
        return cnt;
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* prev=NULL;
        ListNode* temp=head;
        int L=length(head);
        if(L==n)
        {
            return (head->next);
        }
        int c=L-n;
        int cnt=0;
        while(cnt!=c && temp!=NULL)
        {
            prev=temp;
            temp=temp->next;
            cnt++;
        }
        prev->next=temp->next;
        return head;
    }
};

//approach 2
class Solution{
public:
    int length(Node* head){
        Node* temp=head;
        int cnt=1;
        while(temp->next!=NULL){
            temp=temp->next;
            cnt++;
        }
        return cnt;
    }
    int getNthFromLast(Node *head, int n)
    {
         int len=length(head);
         Node* temp=head;
         int c=len-n,cnt=0;
         while(c!=cnt && temp->next!=NULL){
            temp=temp->next;
            cnt++;
         }
         if(temp->next==NULL && cnt>c){
             return -1;
         }
         return temp->data;
    }
};


class Solution {
public:
    int findSize(ListNode* head,vector<int>& a)
    {
        ListNode* temp=head;
        int cnt=0;
        while(temp)
        {
            a.push_back(temp->val);
            cnt++;
            temp=temp->next;
        }
        return cnt;
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        vector<int>a;
        int s=findSize(head,a)-n;
        ListNode* ans=new ListNode(-1);
        ListNode* temp=ans;
        for(int i=0;i<a.size();i++)
        {
            if(i!=s)
            {
                temp->next=new ListNode(a[i]);
                temp=temp->next;
            }
        }
        return ans->next;
    }
};
