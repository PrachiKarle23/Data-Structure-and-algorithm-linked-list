Approach 1 Recursion
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL)
        {
            return list2;
        }
        if(list2==NULL)
        {
            return list1;
        }
        if(list1->val<=list2->val)
        {
            list1->next=mergeTwoLists(list1->next, list2);
            return list1;
        }
        else
        {
           list2->next=mergeTwoLists(list1, list2->next);
           return list2;
        }
    }
};

//Approach2-array
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        vector<int>ans;
        ListNode* temp1=list1;
        ListNode* temp2=list2;
        while(temp1!=NULL)
        {
           
            ans.push_back(temp1->val);
            temp1=temp1->next;
        }
        while(temp2!=NULL)
        {
           
            ans.push_back(temp2->val);
            temp2=temp2->next;
        }
        sort(ans.begin(),ans.end());
        ListNode* newnode=new ListNode(-1);
        ListNode* temp=newnode;
        
        for(int i=0;i<ans.size();i++)
        {
            temp->next=new ListNode(ans[i]);
            temp=temp->next;
        }
        return newnode->next;
    }
};
